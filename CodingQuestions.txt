Question1: Given an array of integers. Rearrange the array such that all odd integers should appear in the left side of the array and all the even integers appear in the right side of the array. Constraint is you can't use any other array.
input = {3,5,6,8,1} 
output = {3,5,1,6,8} --(order of the elements can be different, as long as odd and even numbers are separated)

Solution1:
 public static void rearrange(int[] arr){
    int right = arr.length -1;
    for (int i =0; i < right; i++){ // iterate over array
      if (arr[i] % 2 ==0){ //check if array element is even 
       for(int j = right; j > i; j--){ // if yes, move from right to left 
        if(arr[j] % 2 !=0){  // check if right most element is 
          int temp = arr[j]; 
          arr[j]=arr[i];
          arr[i]=temp;
          break;
        }
       }
     }
    }
}
----------------------------------------------

Question2: Given two sorted arrays of integers. Sort them in ascending order. Constraint: Without using any separate array.
input: int A[]={0,2,5,8}, int[] B={1,6,7}
output: A={0,1,2,5}, B={6,7,8}


Solution2: 
class Solution {
  public static void main(String[] args) {
    int A[]={0,2,5,8};
     int[] B={1,6,7, 3};
     sortThem(A,B);
     printThem(A);
     printThem(B);

  }
    public static void swapThem(int[] a, int[] b, int i){
    int temp = a[i];
    a[i]=b[0];
    b[0]=temp;
  }
    public static void sortIt(int [] arr){
    int temp;
    boolean swaped = true; 
    while(swaped){
     swaped = false;
      for (int i =0; i < arr.length -1; i++){
        if (arr[i] > arr[i + 1]){
        temp = arr[i];
        arr[i] = arr[i+1];
        arr[i+1] =temp;
        swaped = true;
        }
      }
    };
  }
  public static void sortThem(int[] arr1, int[] arr2){
    for (int i = 0; i < arr1.length; i++){
      if(arr1[i] > arr2[0]){
        swapThem(arr1, arr2, i);
------------------------------------------

Question3:
Given an array of integers, find count of pair of numbers whose sum is equal to a specific number passed as parameter.
Input -  Parameter 1:  Int[] array = {1,2,3,4,5} , Parameter 2: 7
Output – 2       (2 pairs : 2,5  ; 3,4)

Solution3:

class Solution {
  public static void main(String[] args) {
int [] arr = {1,2,3,4,5,6};
System.out.println(findCountPairs(arr, 5));
    
  }
  public static int findCountPairs(int[] arr, int num){
    int count =0;
    for (int i =0; i < arr.length -1; i++){
      for (int j =i + 1; j < arr.length; j++){
        if(arr[i] + arr[j] == num){
            ++count;
        }
      }
    }
    return count;
  }
}

------------------------------------------------

Question4: Find the dot product of two arrays along with exception handling in case of wrong inputs. 

Solution4: 
class Solution {
  public static void main(String[] args) {
    int[] arr1 = {1,3,2};
    int[] arr2 = {4,2,3,1};
   System.out.println(findDotProduct(arr1, arr2));

  }
  public static int findDotProduct(int[] arr1, int[] arr2){
    if(arr1.length != arr2.length){
     throw new IllegalArgumentException("The two arrays must be of the same length");
    }
  int sum =0;
  for (int i =0; i < arr1.length; i++){
    sum += arr1[i] * arr2[i];
  }
  return sum;
}

}
----------------------------------
Question5:Reorder the numbers in an int array using Bubblesort
Solution5: class Solution {
  public static void main(String[] args) {
    int[] arr = { 9, 7, 3, 8, 4, 5, 1, 2 };
    reorderUsingBobble(arr);
    for (int el : arr) {
      System.out.print(el);
    }

  }

  public static void reorderUsingBobble(int[] arr) {
    // 3,2,8,4,8,5,6
    boolean swapped = true;
    while (swapped) {
      swapped = false;
      for (int i = 0; i < arr.length - 1; i++) {
        if (arr[i] > arr[i + 1]) {
          int temp = arr[i];
          arr[i] = arr[i + 1];
          arr[i + 1] = temp;
          swapped = true;
        }
      }

    }
  }

}
-------------------------------------
Question6:Find the second smallest number from a given array

Solution6: class Solution {
  public static int findSecondSmallestNumber(int[] arr) {
    int smallest = arr[0];
    for (int i = 1; i < arr.length; i++) {
      if (smallest > arr[i]) {
        smallest = arr[i];
      }
    }
    int secondSmallest = arr[0];
    for(int i=1; i< arr.length; i++){
	if (secondSmallest != smallest && secondSmallest > arr[i]){
	secondSmallest = arr[i]
	}
	}
	return secondSmallest;
  }

  public static void main(String[] args) {

    int[] arr = { 9, 3, 5, 7, 5, 6, 1 };
    System.out.println(findSmallestNumber(arr));
  }

}
--------------------------------------
Question7: Find the smallest number in an array using the log on n
Solution7:
class Solution {
  public static void main(String[] args) {
    int[] arr = {9,7,6,4,3,1};
    System.out.println(findSmallestUsingLog(arr));
  }
  public static int findSmallestUsingLog(int[] arr){
    Arrays.sort(arr);
    return arr[0];
  }
}
----------------------------------------
Question8: Create a program to search a given number in an int array using Binary search
Solution8:

public class Solution {
  public static void main(String[] args) {
    int[] array = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    System.out.println(findTarget(array, 3));
  }

  public static int findTarget(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] == target) {
                return mid;
            }
            
            if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return -1;
    }
}



------------------------------------------
Question 9: "int array[]={1,2,3,4};
         Find the SubArray Sum from the given array and give the No of Possibilites with the SubArray Sum is equal to the Target Value ;
         Test Cases:
         1.Input : subArray(array,6) & Output : 2;
         2.Output :subArray(array,12) & Output:-1;"

Solution 9:
public class Solution {
  public static int findSubArraySum(int[] arr, int target) {
    int count = 0;
    for (int i = 0; i < arr.length -1; i++) {
      int sum = 0;
      for (int j = i; j < arr.length; j++) {
        sum = arr[i] + arr[j];
        if (sum == target) {
          count++;
          break;
        }
        sum = 0;
      }
    }
    
    if (count == 0) {
      count = -1;
    }
    
    return count;
  }

  public static void main(String[] args) {
    int[] array = {1, 2, 3, 4};

    System.out.println(findSubArraySum(array, 6)); // Output: 2
    System.out.println(findSubArraySum(array, 12)); // Output: -1
  }
}
---------------------------------
Question 10. "Find the each person average from given input
String ss[][]={{""Bobby"", ""87"" },
                            {""Charles"", ""100"" },
                            { ""Eric"", ""64"" },
                            { ""Charles"", ""22"" } }; "
Solution 10:
public class Solution {
  public static void main(String[] args) {
  String ss[][]={{"Bobby", "87" },
                { "Charles", "100" },
                { "Eric", "64" },
                { "Charles", "22" } }; 
System.out.print("Average: ");
System.out.println(findAverage(ss));

  }

  public static int findAverage(String[][] arr) {
    int len = arr.length;
    int sum = 0;
    for (int i = 0; i < arr.length; i++) {
      String digit = arr[i][1];
      sum += Integer.parseInt(digit);
    }
    return sum / len;
  }

}

-----------------------
Question 11:"A string array is given containing the addresses of sites accessed, each string consisting IP addresses in the beginning followed by a space and then the complete address. Write a function that  returns a string containing only the IP address(es) which were accessed maximum number of times. 
Example:
Scenario 1-
Input :  {“10.0.1.45 -/d/in/intheclass”,”10.0.1.45 -/a/facts/final…/bhgahf”,”10.3.54.123 -/d/xyz/bcc/yes”}
Output :”10.0.1.45”

              Scenario 2-
Input :  {“10.0.1.45 -/d/intheclass”,”10.0.1.45 -/a/facts/final…/bhgahf”,”10.45.23.34 -/x/new/car/honda”,”10.3.54.123 -/d/random/city/lucknow” ,”10.3.54.123 -/d/rich/family/do”}
Output :”10.0.1.45 10.3.54.123”"

Solution 11:
class Solution {
  public static String findIpAddress(String[] arr) {
    HashMap<String, Integer> dictionary = new HashMap<>();
    // HashSet<String> mySet = new HashSet<>();
    for (int i = 0; i < arr.length; i++) {
      String[] parts = arr[i].split(" ");
      if (dictionary.containsKey(parts[0])) {
        dictionary.put(parts[0], dictionary.get(parts[0]) + 1);
      } else {
        dictionary.put(parts[0], 1);
      }
    }
    Integer max = 0;
    String ip = "";
    for (Map.Entry<String, Integer> entry : dictionary.entrySet()) {
      String key = entry.getKey();
      int value = entry.getValue();
      if (max < value) {
        max = value;
        ip = key;
      }
    }

    return ip;
  }

  public static void main(String[] args) {
    String[] input = {
        "10.0.1.45 -/d/intheclass",
        "10.0.1.45 -/a/facts/final.../bhgahf",
        "10.45.23.34 -/x/new/car/honda",
        "10.3.54.123 -/d/random/city/lucknow",
        "10.3.54.123 -/d/rich/family/do"
    };

    System.out.println(findIpAddress(input));
  }
}
---------------------------
Question 12: "Given a string, remove the consecutive character pairs repetitively.
input: saabbs , output : sabs
input: aaabbbccc , output : abc"

Solution 14: class Solution {
  public static String removeDuplicateLetters(String str) {
    String[] strArr = str.split("");
    String res = String.valueOf(strArr[0]);
    for (int i = 1; i < strArr.length; i++) {
      if (!strArr[i].equals(strArr[i - 1])) {
        res = res + strArr[i];
      }

      // res = res + strArr[i];

    }
    return res;

  }

  public static void main(String[] args) {
    String s = "akkaaabbbcccyyyuue";
    System.out.println(removeDuplicateLetters(s));
  }
}
------------------------------
Question 13:"Given a string find the start index and count of character repeating maximum times (continuous)
Input – Parameter: aabbbbbcAAA
Output - <2, 5>  ( ‘b’ startIndex of is 2 and count is 5)"

Solution: 13
class Solution {
  public static String[] findMaxCharacter(String str) {
    String[] strArr = str.split("");
    HashMap<String, Integer> hashMap = new HashMap<>();
    for (int i = 0; i < str.length(); i++) {
      // Character c = strArr[i];
      if (hashMap.containsKey(strArr[i])) {
        hashMap.put(strArr[i], hashMap.get(strArr[i]) + 1);
      } else {
        hashMap.put(strArr[i], 1);
      }

    }
    String maxKey = null;
    int maxValue = Integer.MIN_VALUE;
    for (Map.Entry<String, Integer> entry : hashMap.entrySet()) {
      if (entry.getValue() > maxValue) {
        maxValue = entry.getValue();
        maxKey = entry.getKey();
      }
    }
    String[] tuple = new String[2];
    tuple[0] = maxKey;
    tuple[1] = Integer.toString(maxValue);
    return tuple;

  }

  public static void main(String[] args) {
    String str = "akkaaabbbcccyyyuue";
    String[] res = findMaxCharacter(str);
    for (int i = 0; i < res.length; i++) {
      System.out.println(res[i]);
    }

  }
}
----------------------------
Question 14: "Write a function that returns the first non-repeating character in String.
Example 1:
Input : ”apple”
Output: ‘a’ 
Example 2:
Input : “papaya”
Output: ‘y’
Questions asked: What is the default value can be returned if all the characters are repeating.
What are all the corner test cases can be added.
What are all the ways by which we can exit any method"


Solution 14:
class Solution {
  public static String findNonRepetingChar(String str) {
    String[] sArr = str.split("");
    HashMap<String, Integer> hashMap = new HashMap<>();
    for (int i = 0; i < sArr.length; i++) {
      if (hashMap.containsKey(sArr[i])) {
        hashMap.put(sArr[i], hashMap.get(sArr[i]) + 1);
      } else {
        hashMap.put(sArr[i], 1);
      }
    }
    for (String s : sArr) {
      if (hashMap.get(s) == 1) {
        return s;
      }
    }
    return null;
  }

  public static void main(String[] args) {
    String input1 = "apple";
    String input2 = "papaya";
    System.out.println(findNonRepetingChar(input1));
    System.out.println(findNonRepetingChar(input2));
  }
}

----------------------------------------------
Question 15: Given a string, write a program to check if it is palindrome or not. A string is said to be palindrome if reverse of the string is same as string. For example, “abba” is palindrome, but “abbc” is not palindrome.

Solution 15:
class Solution {
  public static boolean isPalindrome(String str) {
    String reversed = "";
    String[] sArr = str.split("");
    for (int i = sArr.length - 1; i >= 0; i--) {
      reversed += sArr[i];
    }
    return reversed.equalsIgnoreCase(str);
  }

  public static void main(String[] args) {
    String input1 = "racebike";
    String input2 = "racecar";
    System.out.println(isPalindrome(input1));
    System.out.print(isPalindrome(input2));
  }
}

--------------------------------------------
Question 16:
"Given a string check if it is Pangram or not. A pangram is a sentence containing every letter in the English Alphabet.

Examples : The quick brown fox jumps over the lazy dog ” is a Pangram [Contains all the characters from ‘a’ to ‘z’]
“The quick brown fox jumps over the dog” is not a Pangram [Doesn’t contains all the characters from ‘a’ to ‘z’, as ‘l’, ‘z’, ‘y’ are missing]"

Solution 16:
class Solution {
class Solution {
  public static boolean isPangram(String str) {
    HashMap<String, String> hashMap = new HashMap<>();

    String str1 = str.replaceAll("\\s+", "");
    String[] sArr = str1.toLowerCase().split("");

    for (String s : sArr) {
      hashMap.put(s, s);
    }

    for (char c = 'a'; c <= 'z'; c++) {
      if (!hashMap.containsKey(Character.toString(c))) {
        return false;
      }

    }
    return true;
  }

  public static void main(String[] args) {
    String input1 = "The quick brown fox jumps over the lazy dog";
    String input2 = "The quick brown fox jumps over the dog";
    String input3 = "Portez ce vieux whisky au juge blond qui fume";
    System.out.println(isPangram(input1)); // returns true 
    System.out.println(isPangram(input2)); // returns false 
    System.out.println(isPangram(input3)); // returns true 

  }
}

------------------------------------------------

Question 17: Given a String find the characters(From A-Z) which are not present in that string in alphabetical order
Solution 17: 
class Solution {
  public static String findAbsentCharacters(String str) {
    HashMap<String, String> hashMap = new HashMap<>();
    String[] str1 = str.toLowerCase().split("");
    for (String s : str1) {
      hashMap.put(s, s);
    }
    String str2 = "";
    for (char c = 'a'; c <= 'z'; c++) {
      if (!hashMap.containsKey(Character.toString(c))) {
        str2 += c;
      }
    }
    return str2;
  }

  public static void main(String[] args) {
    String input = "bdgKfKilIfetuxz";
    System.out.print(findAbsentCharacters(input));
  }

}
-----------------------------------
Question 18: "Write a program to reverse letters in a string?/ Reverse the string of characters without using a built in function
 input : saabbs
  output :sbbaas"


Solution 18: 
class Solution {
  public static String reverseString(String str) {
    String reversed = "";
    String[] str2 = str.split("");
    for (int i = 0; i < str2.length; i++) {
      reversed = str2[i] + reversed;
    }
    return reversed;
  }

  public static void main(String[] args) {
    String input = "saabbs";
    System.out.print(reverseString(input));
  }

}
---------------------------------
Question 19: 
"For a string input the function returns output encoded as follows:
Input """" Output """"
Input a Output a1
Input aa Output a2
Input aabb Output a2b2
Input aaabb Output a3b2
Why we should use MVC in our application ?
Explain what is Agile Framework."

Solution 19:
class Solution {
  public static String encodeString(String s) {
    HashMap<String, Integer> hashMap = new HashMap<>();
    String[] s2 = s.split("");
    for (int i = 0; i < s2.length; i++) {
      if (hashMap.containsKey(s2[i])) {
        Integer value = hashMap.get(s2[i]);
        hashMap.put(s2[i], value + 1);
      } else {
        hashMap.put(s2[i], 1);
      }
    }

    String output = "";
    for (String key : hashMap.keySet()) {
      output = output + key + hashMap.get(key);
    }

    return output;
  }

  public static void main(String[] args) {
    String input = "aaaabb";
    System.out.print(encodeString(input));
  }
}
------------------------------------------
Question 21:
"The Fibonacci numbers are the numbers in the following integer sequence. 
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144 . . .
Given a specific number in this series Fn, your program needs to find the sum of all the numbers in the Fibonacci series that are smaller or equal to that number
Input -  8
Output: 20 (Sum of the numbers less than 8 in the fibonacci series. 0 + 1 + 1 + 2 + 3 + 5 + 8)
Questions asked: Memory and Runtime of the written Algorithm"

Solution 21: 
class Solution {
  public static int findSomeOfFib(int n) {
    int prev = 0;
    int sum = 0;
    int current = 1;
    while (current <= n) {
      int temp = current;
      sum = sum + current;
      current += prev;
      prev = temp;

    }
    return sum;
  }

  public static void main(String[] args) {
    int n = 8;
    System.out.print(findSomeOfFib(n));
  }
}
------------------------------------

Question 22:
"Write a function to print nth number in Fibonacci series?
       input : length of the fibonacci Series - 4
       output : 2
 input : length of the fibonacci Series - 6
       output : 5"

Solution 22:
class Solution {
  public static int printNthNumber(int n) {
    int count = 2;
    int prev = 0;
    int curr = 1;
    int temp;
    while (count < n) {
      temp = prev;
      prev = curr;
      curr += temp;
      ++count;
    }
    return curr;
  }

  public static void main(String[] args) {
    int n = 4;
    System.out.print(printNthNumber(n));

  }
}
---------------------------
Question 23: Find if the given number is the power of 10

Solution23:
class Solution {
  public static boolean isPowerOfTen(int n) {
    while (n >= 10) {
      if (n % 10 != 0)
        return false;
      n /= 10;
    }
    if (n == 1) {
      return true;
    } else {
      return false;
    }
  }

  public static void main(String[] args) {

    System.out.print(isPowerOfTen(1000)); // returns true

  }
}

----------------------------------------
Question 24: Swap two numbers without using a third variable

Solution 24:
class Solution {
  public static int[] swapTwoNumbers(int[] num) {
    num[0] = num[0] + num[1]; // puts the sum of num1 + num2.
    num[1] = num[0] - num[1]; // num2 takes the value of num1
    num[0] = num[0] - num[1]; // num1 takes the value of num1
    return num;
  }

  public static void main(String[] args) {
    int[] num = { 34, 987 };
    System.out.println("Before swap: " + "num1=" + num[0] + " num2=" + num[1]);
    swapTwoNumbers(num);
    System.out.print("After swap: " + "num1=" + num[0] + " num2=" + num[1]);

  }
}
--------------------------------------------------
Question 25: Check whether a given number is prime or not.
Solution: 
class Solution {
  public static boolean isPrime(int number) {
    if (number < 2)
      return false;

    for (int i = 2; i < number; i++) {
      if (number % i == 0) {
        return false;
      }
    }
    return true;
  }

  public static void main(String[] args) {
    System.out.println(isPrime(7)); // returns true
    System.out.println(isPrime(9)); // returns false
  }
}
-----------------------------
Question 26:
class Solution {
  public static boolean isArmstrongNumber(int number) {

    double length = Integer.toString(number).length();
    double copy = number;
    double sum = 0;
double digit =0;
    while(number > 0){
      digit = number % 10;
      sum += Math.pow(digit, length);
      number /= 10;
    }
return (sum == copy);
  }

  public static void main(String[] args) {
  System.out.println(isArmstrongNumber(456)); // returns false
  System.out.println(isArmstrongNumber(407)); // returns true 
}
}

Question 27: skipped 27 to 32.
 
------------------
Question 33: // "Create a Floyd triangle by getting the input from the user on the number of rows he wants in the Floyd triangle
// Note- Floyd Triangle is like
// 1
// 2 3
// 4 5 6
// 7 8 9 10"
Solution 33:
class Solution {

  public static void createFloydTriangle(int n) {
    int digit = 1;
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= i; j++) {
        System.out.print(++digit + " ");

      }
      System.out.println();
    }
  }

  public static void main(String[] args) {
    createFloydTriangle(6);

  }
}

---------------------------------
Question 34: 
// "Find out the Robot end position – Implement a method walk(String path) where path is the set of command to move the Robot. Move the ROBOT in U, D, L, R direction i.e Up, Down, Left, Right direction. Implemented method should return the x and y co-ordinate of the robot as an Integer array.
// Example:
// Scenario 1- 
// Input : (“UUU”)
// Output : (new Integer[0, 3])

// Scenario 1- 
// Input : (“UDLRURL”)
// Output : (new Integer[1, 2])

Solution 34:
class Solution {
  public static void findRobot(String string) {
    int[] position = { 0, 0 };
    String[] c = string.split("");
    for (int i = 0; i < c.length; i++) {
      if (c[i].equalsIgnoreCase("R")) {
        position[0] += 1;
      } else if (c[i].equalsIgnoreCase("L")) {
        position[0] -= 1;
      } else if (c[i].equalsIgnoreCase("U")) {
        position[1] += 1;
      } else if (c[i].equalsIgnoreCase("D")) {
        position[1] -= 1;
      } else {
        continue;
      }
    }
    System.out.println(("New Integer [" + String.valueOf(position[0]) + "," + String.valueOf(position[1]) + "]"));
  }
  public static void main(String[] args) {
    findRobot("“UUU”"); // ouput: New Integer [0,3]
    findRobot("UDLRURL"); // New Integer output [0,1]
  }
}

-------
Question 35:
Given an array a that contains only numbers in the range from 1 to a.length, find the first duplicate number for which the second occurrence has the minimal index. In other words, if there are more than 1 duplicated numbers, return the number for which the second occurrence has a smaller index than the second occurrence of the other number does. If there are no such elements, return -1.

Example

For a = [2, 1, 3, 5, 3, 2], the output should be solution(a) = 3.

There are 2 duplicates: numbers 2 and 3. The second occurrence of 3 has a smaller index than the second occurrence of 2 does, so the answer is 3.

For a = [2, 2], the output should be solution(a) = 2;

For a = [2, 4, 3, 5, 1], the output should be solution(a) = -1

Solution35: 
int solution(int[] a) {
    // A HashSet to keep track of the numbers we've seen so far
    Set<Integer> set = new HashSet<>();
    
    // Initialize with -1, as it indicates no duplicate found yet
    int earliestDuplicateValue = -1;
    
    // Initialize with the maximum possible integer value.
    // It will be replaced by the index of the earliest second occurrence of a number.
    int earliestDuplicateIndex = Integer.MAX_VALUE;
    
    // Iterate through the given array
    for (int i = 0; i < a.length; i++) {
        // If the number already exists in the set, it's a duplicate
        if (set.contains(a[i])) {
            // If this duplicate's index is earlier than previously found duplicates,
            // update our result variables
            if (i < earliestDuplicateIndex) {
                earliestDuplicateIndex = i;
                earliestDuplicateValue = a[i];
            }
        } else {
            // If it's a new number, add it to the set
            set.add(a[i]);
        }
    }
    
    // Return the earliest duplicate value (or -1 if no duplicate was found)
    return earliestDuplicateValue;
}

Question- 36:
Given: An array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

Example:
Input: nums = [2,7,11,15], target = 9
Output: [0,1] because nums[0] + nums[1] == 9

Solution 36:
import java.util.HashMap;
import java.util.Map;

public class TwoSum {
    public int[] twoSum(int[] nums, int target) {
        // Create a map to store the number and its index
        Map<Integer, Integer> map = new HashMap<>();
        
        // Traverse the nums array
        for (int i = 0; i < nums.length; i++) {
            // Calculate the required complement for the current number
            int complement = target - nums[i];
            
            // If the complement is found in the map, return the indices
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            
            // Otherwise, put the current number and its index in the map
            map.put(nums[i], i);
        }
        
        // Return an empty array if no solution is found
        return new int[0];
    }

    public static void main(String[] args) {
        TwoSum ts = new TwoSum();
        int[] nums = {2, 7, 11, 15};
        int target = 9;
        int[] result = ts.twoSum(nums, target);
        
        for (int index : result) {
            System.out.print(index + " ");
        }
    }
}

37. Given an array of integers. Rearrange the array so that all even numbers are on the left side of the array and odd numbers on the right.
for example, imput: 0,1,2,3,4,5,6,7,8,9. Output: 0, 8, 2, 6, 4, 5, 3, 7, 1, 9

Solution 37: 
class Solution {
  public static void main(String[] args) {
    int[] array = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    rearrrangeNumbers(array);
  }

 
public static void rearrrangeNumbers(int[] arr) {
  
    int rigth = arr.length - 1;
    int left = 0;
// as long as left is less than right 
    while (left < rigth) {

// as long as left is less than right and number is even move to the right
      while ((left < rigth) && (arr[left] % 2 == 0)) {
        left += 1;
      }
// as long as left is less than right and number is odd, move to the left
      while ((left < rigth) && (arr[rigth] % 2 != 0)) {
        rigth -= 1;
      }
// at that point, left number is odd and right number is even, then 
perform a swap as instructed in the problem.
      int temp = arr[left];
      arr[left] = arr[rigth];
      arr[rigth] = temp;
    }
   for(int i =0; i< arr.length; i++){
      System.out.print(arr[i] + " ");
    }
  }
}






